# 1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()), который должен принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц: 3 на 2, 3 на 3, 2 на 4.
#
# 31    32         3    5    32        3    5    8    3
# 37    43         2    4    6         8    3    7    1
# 51    86        -1   64   -8
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.

from random import randint      # для генератора матриц

# Мне лень писать руками длинные списки списков, поэтому я сделал функцию, которая генерит список списков (матрицу)
# заданного размера m*n, параметры m и n зафиксирую, потому что складывать я все равно буду матрицы одного размера,
# т.к. линейная алгебра других матриц складывать не разрешает


def matr_gen(m=3, n=5):

    return [[randint(0, 9) for j in range(n)] for i in range(m)]

# генерим матрицы

matr_1 = matr_gen()
matr_2 = matr_gen()

# выводим посмотреть

print(matr_1)
print(matr_2)

# Определяем класс, с одним атрибутом - матрица = список списков
class Matrix:
    def __init__(self, matrix):
        self.matrix = matrix

# Тут будем перегружать метод __str__, делал его до разбора дз, поэтому делал в лоб проходя по списку и выводя подсписки
    def __str__(self):
        for row in self.matrix:
            for i in row:
                print(f"{i}   ", end="")    # Добавляем пробелов для красоты
            print()
        return ''                           # костыль, т.к. вернуть надо строку. так себе метод)
#     Второй способ, через for in, пересобираем строку по элементам списков
#     def __str__(self):
#         return str('\n'.join(['\t'.join([str(el) for el in row]) for row in self.matrix]))

#     Третий способ, через map как в разборе ДЗ
#     def __str__(self):
#         return '\n'.join(map(str, self.my_list))

# Перегружаем метод __add___, проверку не делаю т.к. заранее знаю, что матрицы одинаковые по размеру
    def __add__(self, other):
        for i in range(len(self.matrix)):
            for j in range(len(other.matrix[i])):
                self.matrix[i][j] = self.matrix[i][j] + other.matrix[i][j]
        return Matrix.__str__(self)

# создаем два экземпляра класса
matrix_1 = Matrix(matr_1)
matrix_2 = Matrix(matr_2)

# выводим посмотреть как отрабатывает принт
print(matrix_1)
print(matrix_2)

# складываем два экземпляра объекта матрица
matrix_3 = matrix_1 + matrix_2

# Выводим посмотреть
print(matrix_3)
